// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: proto/stats.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatsClient is the client API for Stats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatsClient interface {
	// Unary RPCs for individual stats
	GetCpu(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CpuResponse, error)
	GetDisk(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DiskResponse, error)
	GetHost(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HostResponse, error)
	GetMemory(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MemoryResponse, error)
	GetTemperature(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TemperatureResponse, error)
	// Server-side streaming RPC for all stats
	StreamAllStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Stats_StreamAllStatsClient, error)
}

type statsClient struct {
	cc grpc.ClientConnInterface
}

func NewStatsClient(cc grpc.ClientConnInterface) StatsClient {
	return &statsClient{cc}
}

func (c *statsClient) GetCpu(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CpuResponse, error) {
	out := new(CpuResponse)
	err := c.cc.Invoke(ctx, "/stats.Stats/GetCpu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) GetDisk(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DiskResponse, error) {
	out := new(DiskResponse)
	err := c.cc.Invoke(ctx, "/stats.Stats/GetDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) GetHost(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HostResponse, error) {
	out := new(HostResponse)
	err := c.cc.Invoke(ctx, "/stats.Stats/GetHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) GetMemory(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MemoryResponse, error) {
	out := new(MemoryResponse)
	err := c.cc.Invoke(ctx, "/stats.Stats/GetMemory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) GetTemperature(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TemperatureResponse, error) {
	out := new(TemperatureResponse)
	err := c.cc.Invoke(ctx, "/stats.Stats/GetTemperature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) StreamAllStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Stats_StreamAllStatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Stats_ServiceDesc.Streams[0], "/stats.Stats/StreamAllStats", opts...)
	if err != nil {
		return nil, err
	}
	x := &statsStreamAllStatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stats_StreamAllStatsClient interface {
	Recv() (*AllStats, error)
	grpc.ClientStream
}

type statsStreamAllStatsClient struct {
	grpc.ClientStream
}

func (x *statsStreamAllStatsClient) Recv() (*AllStats, error) {
	m := new(AllStats)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatsServer is the server API for Stats service.
// All implementations must embed UnimplementedStatsServer
// for forward compatibility
type StatsServer interface {
	// Unary RPCs for individual stats
	GetCpu(context.Context, *Empty) (*CpuResponse, error)
	GetDisk(context.Context, *Empty) (*DiskResponse, error)
	GetHost(context.Context, *Empty) (*HostResponse, error)
	GetMemory(context.Context, *Empty) (*MemoryResponse, error)
	GetTemperature(context.Context, *Empty) (*TemperatureResponse, error)
	// Server-side streaming RPC for all stats
	StreamAllStats(*Empty, Stats_StreamAllStatsServer) error
	mustEmbedUnimplementedStatsServer()
}

// UnimplementedStatsServer must be embedded to have forward compatible implementations.
type UnimplementedStatsServer struct {
}

func (UnimplementedStatsServer) GetCpu(context.Context, *Empty) (*CpuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCpu not implemented")
}
func (UnimplementedStatsServer) GetDisk(context.Context, *Empty) (*DiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisk not implemented")
}
func (UnimplementedStatsServer) GetHost(context.Context, *Empty) (*HostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHost not implemented")
}
func (UnimplementedStatsServer) GetMemory(context.Context, *Empty) (*MemoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemory not implemented")
}
func (UnimplementedStatsServer) GetTemperature(context.Context, *Empty) (*TemperatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemperature not implemented")
}
func (UnimplementedStatsServer) StreamAllStats(*Empty, Stats_StreamAllStatsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAllStats not implemented")
}
func (UnimplementedStatsServer) mustEmbedUnimplementedStatsServer() {}

// UnsafeStatsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatsServer will
// result in compilation errors.
type UnsafeStatsServer interface {
	mustEmbedUnimplementedStatsServer()
}

func RegisterStatsServer(s grpc.ServiceRegistrar, srv StatsServer) {
	s.RegisterService(&Stats_ServiceDesc, srv)
}

func _Stats_GetCpu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).GetCpu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stats.Stats/GetCpu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).GetCpu(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_GetDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).GetDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stats.Stats/GetDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).GetDisk(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_GetHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).GetHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stats.Stats/GetHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).GetHost(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_GetMemory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).GetMemory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stats.Stats/GetMemory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).GetMemory(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_GetTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).GetTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stats.Stats/GetTemperature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).GetTemperature(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_StreamAllStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatsServer).StreamAllStats(m, &statsStreamAllStatsServer{stream})
}

type Stats_StreamAllStatsServer interface {
	Send(*AllStats) error
	grpc.ServerStream
}

type statsStreamAllStatsServer struct {
	grpc.ServerStream
}

func (x *statsStreamAllStatsServer) Send(m *AllStats) error {
	return x.ServerStream.SendMsg(m)
}

// Stats_ServiceDesc is the grpc.ServiceDesc for Stats service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stats_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stats.Stats",
	HandlerType: (*StatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCpu",
			Handler:    _Stats_GetCpu_Handler,
		},
		{
			MethodName: "GetDisk",
			Handler:    _Stats_GetDisk_Handler,
		},
		{
			MethodName: "GetHost",
			Handler:    _Stats_GetHost_Handler,
		},
		{
			MethodName: "GetMemory",
			Handler:    _Stats_GetMemory_Handler,
		},
		{
			MethodName: "GetTemperature",
			Handler:    _Stats_GetTemperature_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAllStats",
			Handler:       _Stats_StreamAllStats_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/stats.proto",
}
